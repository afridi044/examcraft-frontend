name: Docker CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment file
        run: |
          echo "NODE_ENV=production" > .env.production
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.production
          # Add other necessary environment variables here
          echo "NODE_ENV=development" > .env.docker
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.docker
          # Add other necessary environment variables here

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build with docker-compose (no cache)
        run: |
          # Remove any existing images to ensure fresh build
          docker-compose down --volumes --remove-orphans || true
          docker system prune -f || true
          # Build with no cache to ensure latest source code is used
          docker-compose build --no-cache --force-rm

      - name: Check Docker images
        run: |
          docker images

      - name: Tag and push to Docker Hub
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="examcraft-v2-${COMMIT_SHA}-${TIMESTAMP}"

          docker tag examcraft-frontend_examcraft-frontend:latest sajidnoor5051/sajid_private_repo:${IMAGE_TAG}
          docker tag examcraft-frontend_examcraft-frontend:latest sajidnoor5051/sajid_private_repo:examcraft-v2

          docker push sajidnoor5051/sajid_private_repo:${IMAGE_TAG}
          docker push sajidnoor5051/sajid_private_repo:examcraft-v2

          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
                    script: |
            cd examcraft
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # FIXED: Stop and remove existing container FIRST
            docker stop examcraft || true
            docker rm examcraft || true
            
            # FIXED: Aggressive cleanup BEFORE pulling new image to free up space
            echo "Cleaning up Docker resources to free disk space..."
            docker system prune -af --volumes || true
            docker image prune -af || true
            
            # Check available disk space
            echo "Disk space before pull:"
            df -h
            
                        # FIXED: Pull latest image after cleanup
            if docker pull sajidnoor5051/sajid_private_repo:examcraft-v2; then
              echo "✅ Successfully pulled new image"
            else
              echo "❌ Failed to pull image - checking disk space:"
              df -h
              echo "Attempting emergency cleanup..."
              docker system prune -af --volumes || true
              echo "Retrying pull..."
              docker pull sajidnoor5051/sajid_private_repo:examcraft-v2
            fi
            
            # Check disk space after pull
            echo "Disk space after pull:"
            df -h
            
            # Run new container with fresh image
            docker run -d \
              --name examcraft \
              -p 80:3000 \
              --restart unless-stopped \
              --dns 8.8.8.8 \
              --dns 8.8.4.4 \
              --env-file .env.production \
              sajidnoor5051/sajid_private_repo:examcraft-v2
              
            # Wait for container to start
            sleep 15
            
            # Check if container is running and healthy
            echo "Container status:"
            docker ps | grep examcraft || echo "Container failed to start"
            
            # Check container logs for any startup issues
            echo "Recent container logs:"
            docker logs examcraft --tail 10 || true
            
            # Final disk space check
            echo "Final disk space:"
            df -h
            
            # Logout for security
            docker logout
